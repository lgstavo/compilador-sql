# Generated from src/SchemaScript.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,231,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,
        3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,191,8,20,1,21,
        1,21,5,21,195,8,21,10,21,12,21,198,9,21,1,22,4,22,201,8,22,11,22,
        12,22,202,1,23,1,23,5,23,207,8,23,10,23,12,23,210,9,23,1,23,1,23,
        1,24,1,24,1,24,1,24,5,24,218,8,24,10,24,12,24,221,9,24,1,24,1,24,
        1,25,4,25,226,8,25,11,25,12,25,227,1,25,1,25,0,0,26,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,2,0,39,39,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,238,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,1,53,1,0,0,0,3,59,1,0,0,0,5,66,1,0,0,0,7,68,1,0,0,0,9,70,1,0,
        0,0,11,72,1,0,0,0,13,74,1,0,0,0,15,76,1,0,0,0,17,78,1,0,0,0,19,96,
        1,0,0,0,21,108,1,0,0,0,23,114,1,0,0,0,25,121,1,0,0,0,27,129,1,0,
        0,0,29,132,1,0,0,0,31,134,1,0,0,0,33,144,1,0,0,0,35,152,1,0,0,0,
        37,157,1,0,0,0,39,159,1,0,0,0,41,190,1,0,0,0,43,192,1,0,0,0,45,200,
        1,0,0,0,47,204,1,0,0,0,49,213,1,0,0,0,51,225,1,0,0,0,53,54,5,99,
        0,0,54,55,5,114,0,0,55,56,5,105,0,0,56,57,5,97,0,0,57,58,5,114,0,
        0,58,2,1,0,0,0,59,60,5,116,0,0,60,61,5,97,0,0,61,62,5,98,0,0,62,
        63,5,101,0,0,63,64,5,108,0,0,64,65,5,97,0,0,65,4,1,0,0,0,66,67,5,
        123,0,0,67,6,1,0,0,0,68,69,5,125,0,0,69,8,1,0,0,0,70,71,5,58,0,0,
        71,10,1,0,0,0,72,73,5,59,0,0,73,12,1,0,0,0,74,75,5,40,0,0,75,14,
        1,0,0,0,76,77,5,41,0,0,77,16,1,0,0,0,78,79,5,99,0,0,79,80,5,104,
        0,0,80,81,5,97,0,0,81,82,5,118,0,0,82,83,5,101,0,0,83,84,5,95,0,
        0,84,85,5,101,0,0,85,86,5,115,0,0,86,87,5,116,0,0,87,88,5,114,0,
        0,88,89,5,97,0,0,89,90,5,110,0,0,90,91,5,103,0,0,91,92,5,101,0,0,
        92,93,5,105,0,0,93,94,5,114,0,0,94,95,5,97,0,0,95,18,1,0,0,0,96,
        97,5,111,0,0,97,98,5,98,0,0,98,99,5,114,0,0,99,100,5,105,0,0,100,
        101,5,103,0,0,101,102,5,97,0,0,102,103,5,116,0,0,103,104,5,111,0,
        0,104,105,5,114,0,0,105,106,5,105,0,0,106,107,5,111,0,0,107,20,1,
        0,0,0,108,109,5,117,0,0,109,110,5,110,0,0,110,111,5,105,0,0,111,
        112,5,99,0,0,112,113,5,111,0,0,113,22,1,0,0,0,114,115,5,112,0,0,
        115,116,5,97,0,0,116,117,5,100,0,0,117,118,5,114,0,0,118,119,5,97,
        0,0,119,120,5,111,0,0,120,24,1,0,0,0,121,122,5,105,0,0,122,123,5,
        110,0,0,123,124,5,115,0,0,124,125,5,101,0,0,125,126,5,114,0,0,126,
        127,5,105,0,0,127,128,5,114,0,0,128,26,1,0,0,0,129,130,5,101,0,0,
        130,131,5,109,0,0,131,28,1,0,0,0,132,133,5,44,0,0,133,30,1,0,0,0,
        134,135,5,97,0,0,135,136,5,116,0,0,136,137,5,117,0,0,137,138,5,97,
        0,0,138,139,5,108,0,0,139,140,5,105,0,0,140,141,5,122,0,0,141,142,
        5,97,0,0,142,143,5,114,0,0,143,32,1,0,0,0,144,145,5,100,0,0,145,
        146,5,101,0,0,146,147,5,102,0,0,147,148,5,105,0,0,148,149,5,110,
        0,0,149,150,5,105,0,0,150,151,5,114,0,0,151,34,1,0,0,0,152,153,5,
        111,0,0,153,154,5,110,0,0,154,155,5,100,0,0,155,156,5,101,0,0,156,
        36,1,0,0,0,157,158,5,61,0,0,158,38,1,0,0,0,159,160,5,97,0,0,160,
        161,5,103,0,0,161,162,5,111,0,0,162,163,5,114,0,0,163,164,5,97,0,
        0,164,40,1,0,0,0,165,166,5,99,0,0,166,167,5,104,0,0,167,168,5,97,
        0,0,168,169,5,118,0,0,169,191,5,101,0,0,170,171,5,116,0,0,171,172,
        5,101,0,0,172,173,5,120,0,0,173,174,5,116,0,0,174,191,5,111,0,0,
        175,176,5,105,0,0,176,177,5,110,0,0,177,178,5,116,0,0,178,179,5,
        101,0,0,179,180,5,105,0,0,180,181,5,114,0,0,181,191,5,111,0,0,182,
        183,5,100,0,0,183,184,5,97,0,0,184,185,5,116,0,0,185,186,5,97,0,
        0,186,187,5,104,0,0,187,188,5,111,0,0,188,189,5,114,0,0,189,191,
        5,97,0,0,190,165,1,0,0,0,190,170,1,0,0,0,190,175,1,0,0,0,190,182,
        1,0,0,0,191,42,1,0,0,0,192,196,7,0,0,0,193,195,7,1,0,0,194,193,1,
        0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,44,1,0,
        0,0,198,196,1,0,0,0,199,201,7,2,0,0,200,199,1,0,0,0,201,202,1,0,
        0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,46,1,0,0,0,204,208,5,39,
        0,0,205,207,8,3,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,
        0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,5,39,
        0,0,212,48,1,0,0,0,213,214,5,47,0,0,214,215,5,47,0,0,215,219,1,0,
        0,0,216,218,8,4,0,0,217,216,1,0,0,0,218,221,1,0,0,0,219,217,1,0,
        0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,6,24,
        0,0,223,50,1,0,0,0,224,226,7,5,0,0,225,224,1,0,0,0,226,227,1,0,0,
        0,227,225,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,6,25,0,
        0,230,52,1,0,0,0,7,0,190,196,202,208,219,227,1,6,0,0
    ]

class SchemaScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    NOME_TIPO = 21
    ID = 22
    NUMBER = 23
    STRING = 24
    COMMENT = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'criar'", "'tabela'", "'{'", "'}'", "':'", "';'", "'('", "')'", 
            "'chave_estrangeira'", "'obrigatorio'", "'unico'", "'padrao'", 
            "'inserir'", "'em'", "','", "'atualizar'", "'definir'", "'onde'", 
            "'='", "'agora'" ]

    symbolicNames = [ "<INVALID>",
            "NOME_TIPO", "ID", "NUMBER", "STRING", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "NOME_TIPO", "ID", "NUMBER", "STRING", "COMMENT", "WS" ]

    grammarFileName = "SchemaScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


